"""
Copyright (c) 2018, Jairus Martin.

Distributed under the terms of the MIT License.

The full license is in the file LICENSE, distributed with this software.

Created on Jun 19, 2018

@author: jrm
"""
from atom.api import Enum
from web.components.api import (
    Div, Footer, Nav, A, Ul, Li, Img, Span, I, H1, H3, H5, P
)
from web.core.api import Block, Looper, Conditional


# ==============================================================================
# Grid components
# ==============================================================================
enamldef Container(Div):
    attr color: str = ''
    cls << ' '.join(('container', color))
    tag = 'div'


enamldef Row(Div):
    attr color: str = ''
    cls << ' '.join(('row', color))
    tag = 'div'


enamldef Col(Div):
    attr size: str = 'l12'
    attr color: str = ''
    tag = 'div'
    cls << ' '.join(('col', size, color))


# ==============================================================================
# Footer components
# ==============================================================================
enamldef PageFooter(Footer):
    tag = 'footer'
    attr color: str = ''
    cls << ' '.join(('page-footer', color))

enamldef PageCopyright(Div):
    tag = 'div'
    attr color: str = ''
    cls << ' '.join(('footer-copyright', color))

# ==============================================================================
# Navbar components
# ==============================================================================
enamldef BasicNavbar(Nav):
    tag = 'nav'

    #: Alias to the title component
    alias title

    #: Enum('left', 'right', 'center')
    attr side = 'left'

    #: Links to display on large displays
    attr links: list = []

    #: Alias to the content
    alias content

    #: Alias to the content container
    alias container

    #: Navbar color
    attr color: str = ''
    cls << ' '.join((color,))
    Div:
        cls = 'nav-wrapper'
        Container: container:
            A: title:
                cls << 'brand-logo {}'.format('' if side == 'left' else side)
            Block: content:
                Ul:
                    cls = "hide-on-med-and-down {}".format(
                        'left' if side == 'left' else 'right')
                    Looper:
                        iterable << links
                        Li:
                            A:
                                text << link.text
                                href << link.url

# ==============================================================================
# Card components
# ==============================================================================
enamldef Card(Div): card:
    #: Card with a title, caption
    tag = 'div'

    #: Card title
    attr title: str = ""

    #: Image source
    attr image: str = ""

    #: Color
    attr color: str = ''
    cls << ' '.join(('card', color))

    alias content
    Conditional:
        condition << bool(image)
        Div:
            cls = 'card-image'
            Img:
                src << card.image
            Span:
                cls = 'card-title'
                text << card.title
    Div:
        cls = 'card-content'
        Block: content:
            Conditional:
                condition << not bool(image)
                Span:
                    cls = 'card-title'
                    text << card.title


enamldef CardActions(Div):
    tag = 'div'
    cls = 'card-action'


# ==============================================================================
# Basic components
# ==============================================================================
enamldef Icon(I):
    tag = 'i'
    attr side: str = ''
    attr color: str = ''
    cls << ' '.join(('material-icons', side, color))


enamldef Badge(Span):
    #: Use text to set the badge count
    tag = 'span'
    attr new: bool = False
    attr color: str = ""
    attr caption: str = ""
    cls << ' '.join(('badge', 'new' if new else '', color))
    attrs << {'data-badge-captio': caption} if caption else {}


enamldef Breadcrumbs(Nav): nav:
    attr path: str = "" # ex. pass in request.path
    attr color: str = ""
    attr breadcrumbs << path.strip("/").split("/")
    tag = 'nav'
    Div:
        cls = 'nav-wrapper {}'.format(nav.color)
        Div: container:
            cls = 'container'
            Div:
                cls = 'col s12'
                Looper:
                    iterable << breadcrumbs
                    A:
                        href = "/{}/".format("/".join(breadcrumbs[:loop_index+1]))
                        cls = "breadcrumb"
                        text = loop_item.replace("-", " ").title()


enamldef Pagination(Ul):
    #: Start page
    attr start: int = 0

    #: End page
    attr end: int = 10

    #: Current page
    attr current: int = 0
    attr color: str = ''

    #: Query string
    attr query: str = '?p={i}'

    alias prev
    alias next
    tag = 'ul'
    cls = 'pagination'
    Conditional:
        condition << end-start > 0
        Li:
            cls << 'disabled' if start == 0 else ''
            A: prev:
                Icon:
                    text = 'chevron_left'
            Looper:
                iterable << range(start,end)
                Li:
                    cls << ('active'+ color) if loop_index == current else 'waves-effect'
                    A:
                        href << query.format(i=loop_index)
                        text='{}'.format(loop_index+1)
            A: next:
                Icon:
                    text = 'chevron_right'
# ==============================================================================
# Buttons
# ==============================================================================
enamldef RaisedButton(A):
    tag = 'a'
    attr size: str = ""
    attr color: str = ""
    attr disabled: bool = False
    attr _style: str = "btn"

    # If no link is given assume this should be handled via websockets
    clickable << not bool(self.href)
    cls << ' '.join(('waves-effect waves-light',
                     color,
                     'btn-'+size if size else '',
                     _style,
                     'disabled' if disabled else ''))


enamldef FloatingActionButton(RaisedButton):
    tag = 'a'
    size = 'large'
    _style = 'btn-floating'


enamldef FlatButton(RaisedButton):
    tag = 'a'
    _style = 'btn-flat'



# ==============================================================================
# Paralax components
# ==============================================================================
enamldef Parallax(Div):
    #: Parallax background image
    alias image: img.src

    #: Content block
    alias content

    #: Optional height
    attr height = ''

    tag = 'div'
    cls = 'parallax-container'
    style << 'height: {};'.format(height) if height else ''
    Div:
        cls = 'row container'
        Block: content:
            pass
    Div:
        cls = "parallax"
        Img: img:
            pass


enamldef TitleParallax(Parallax):
    #: Parallax with a title and caption
    alias title
    alias caption
    cls = 'parallax-container valign-wrapper'
    Block:
        block = parent.content
        H1: title:
            attr color: str = "white"
            cls << 'header center-align {}-text light'.format(self.color)
        H5: caption:
            attr color: str = "white"
            cls << 'header center-align {}-text light'.format(self.color)


enamldef ButtonParallax(TitleParallax): banner:
    #: Parallax with a title, caption, and button
    alias button
    tag = "div"
    Block:
        block = parent.content
        mode = 'append'
        Div:
            cls = 'row center'
            A: button:
                attr color: str = "white-text"
                cls << "btn-large waves-effect waves-light {}".format(self.color)


# ==============================================================================
# Media components
# ==============================================================================
enamldef MediaSlider(Div):
    #: Slides should be a list of dictionaries with the format
    #: {'title': str, 'caption': str, 'image': str, 'align': str}
    attr slides: list = []
    tag = 'div'
    cls = 'slider'
    Ul:
        cls = 'slides'
        Looper:
            iterable << slides
            Li:
                Img:
                    src = loop_item.get('image','')
                Div:
                    cls = 'caption  {}-align'.format(loop_item.get('align','left'))
                    H3:
                        text = loop_item.get('title','')
                    H5:
                        cls = 'light grey-text text-lighten-3'
                        text = loop_item.get('caption','')

enamldef BoxedImage(Img):
    tag = 'img'
    cls = "materialboxed"
    width = "100%"

# ==============================================================================
# Dropdown menus
# ==============================================================================
enamldef DropdownTrigger(A):
    tag = 'a'
    href = '#'
    attr color: str = ""
    attr trigger: str = ""
    attr _style: str = ""
    cls << '{} dropdown-trigger {}'.format(_style, color)
    attrs << {'data-target': trigger}


enamldef DropdownMenu(Ul):
    tag = 'ul'
    cls = 'dropdown-content'

# ==============================================================================
# Modal components
# ==============================================================================
enamldef Modal(Div):
    tag = 'div'
    cls = 'modal'
    alias content
    alias footer
    Div:
        cls = 'modal-content'
        Block: content:
            pass
    Div:
        cls = 'modal-footer'
        Block: footer:
            pass

enamldef ModalAction(A):
    tag = 'a'
    cls = "modal-action modal-close waves-effect btn-flat"

enamldef ModalTrigger(A):
    tag = 'a'
    attr trigger: str = ""
    href << "#" + trigger
    cls = "waves-effect waves-light btn modal-trigger"

# ==============================================================================
# Collapsible components
# ==============================================================================
enamldef Accordion(Ul):
    tag = 'ul'
    #: Either 'expandable' or 'popout'
    attr mode: str = ''
    cls << ' '.join(('collapsible', mode))


enamldef AccordionSection(Li):
    tag = 'li'
    attr title: str = ""
    attr icon: str = ""
    attr active: bool = False
    cls << ' '.join(('active' if active else '',))
    alias header
    alias content
    Div:
        cls = 'collapsible-header'
        text << title
        Conditional:
            condition << bool(icon)
            Icon:
                text << icon
        Block: header:
            pass
    Div:
        cls = 'collapsible-body'
        Block: content:
            pass

# ==============================================================================
# Preloader components
# ==============================================================================
enamldef ProgressBar(Div):
    tag = 'div'
    attr indeterminate: bool = False
    attr progress: int = 0
    cls = 'progress'
    Div:
        cls << 'indeterminate' if indeterminate else 'determinate'
        style << '' if indeterminate else 'width: {}%'.format(
            max(0, min(100, progress)))


enamldef ActivityIndicator(Div):
    tag = 'div'
    attr color: str = ''
    attr active: bool = True
    attr size: str = '' # big , '', or small
    cls << ' '.join(('preloader-wrapper', size,
                    'active' if active else ''))
    Div:
        cls << ' '.join(('spinner-layer',
                         'spinner-{}'.format(color+'-only' if color else 'blue')))
        Div:
            cls = 'circle-clipper left'
            Div:
                cls = 'circle'
        Div:
            cls = 'gap-patch'
        Div:
            cls = 'circle-clipper right'
            Div:
                cls = 'circle'
