"""
Copyright (c) 2017-2018, Jairus Martin.

Distributed under the terms of the MIT License.

The full license is in the file LICENSE, distributed with this software.

Based on https://nucleic.github.io/enaml/docs/examples/ex_advanced.html
Generates a form based on the properties of the model given.

Created on Apr 17, 2017

@author: jrm
"""
import sys
import datetime
from atom.api import (
    Atom, Member, Value, Bool, Enum, Event, Float, Int, Str, Unicode, List,
    Dict, Instance, Tuple
)
from enaml.core.api import Looper, Conditional, DynamicTemplate
from web.components.api import (
    P, Button, Div, Form, Label, Input, Select, Option, Ul, Li, A, Span
)
from materialize.fields import (
    IntField, FloatField, TextField, TextareaField, CheckboxField, SwitchField, 
    SelectField, RadioField, DatePickerField, TimePickerField
)
from materialize.utils import DynamicModel



#------------------------------------------------------------------------------
# "Library" Definitions
#------------------------------------------------------------------------------
# The templates and enamldefs defined in this section are ones which can
# be written once and then used as a library. They are more-or-less fully
# generic and will work for a large swath of models.

template FormControl(Attr, Prefix, Layout, MemberType):
    """ A template which generates a control for an AutoForm.

    This default specialization displays read-only text for the value.

    Parameters
    ----------
    Attr : str
        The name of the attribute on 'model' being accessed.
    Layout: FormLayout
        The layout of the form.
    MemberType : type
        The type of the member being accessed.

    """
    const label_text = Attr.title().replace("_"," ")
    const styles = Layout.styles.get(Attr, {})
    Div:
        cls = styles.get('cls', 'row')
        TextField:
            input.name = '{}.{}'.format(Prefix, Attr)
            disabled = True
            value << getattr(model, Attr)


template FormControl(Attr, Prefix, Layout, MemberType: Int):
    """ A form control template specialization for Int members.

    This control uses a spin box to represent the value.

    """
    const label_text = Attr.title().replace("_"," ")
    const styles = Layout.styles.get(Attr, {})
    Div:
        cls = styles.get('cls', 'row')
        IntField:
            label.text = label_text
            input.name = '{}.{}'.format(Prefix, Attr)
            config = styles
            value := getattr(model, Attr)


template FormControl(Attr, Prefix, Layout, MemberType: Str):
    """ A form control template specialization for Str members.

    This control uses a Field to represent the value.

    """
    const label_text = Attr.title().replace("_"," ")
    const styles = Layout.styles.get(Attr, {})
    Div:
        cls = styles.get('cls', 'row')
        Conditional:
            condition = styles.get("style") != 'textarea'
            TextField:
                label.text = label_text
                input.name = '{}.{}'.format(Prefix, Attr)
                config = styles
                value := getattr(model, Attr)
        Conditional:
            condition = styles.get("style") == 'textarea'
            TextareaField:
                label.text = label_text
                input.name = '{}.{}'.format(Prefix, Attr)
                config = styles
                value := getattr(model, Attr)

template FormControl(Attr, Prefix, Layout, MemberType: Unicode):
    """ A form control template specialization for Unicode members.

    This control uses a Field to represent the value.

    """
    const label_text = Attr.title().replace("_"," ")
    const styles = Layout.styles.get(Attr, {})
    Div:
        cls = styles.get('cls', 'row')
        Conditional:
            condition = styles.get("style") != 'textarea'
            TextField:
                label.text = label_text
                input.name = '{}.{}'.format(Prefix, Attr)
                config = styles
                value := getattr(model, Attr)
        Conditional:
            condition = styles.get("style") == 'textarea'
            TextareaField:
                label.text = label_text
                input.name = '{}.{}'.format(Prefix, Attr)
                config = styles
                value := getattr(model, Attr)


template FormControl(Attr, Prefix, Layout, MemberType: Float):
    """ A form control template specialization for Float members.

    This control uses a FloatField to represent the value.

    """
    const label_text = Attr.title().replace("_"," ")
    const styles = Layout.styles.get(Attr, {})
    Div:
        cls = styles.get('cls', 'row')
        FloatField:
            label.text = label_text
            input.name = '{}.{}'.format(Prefix, Attr)
            config = styles
            value := getattr(model, Attr)


template FormControl(Attr, Prefix, Layout, MemberType: Bool):
    """ A form control template specialization for Bool members.

    This control uses a CheckBox or a Switch to represent the value.

    """
    const label_text = Attr.title().replace("_"," ")
    const styles = Layout.styles.get(Attr, {})
    Conditional:
        condition = styles.get("style", "checkbox") == 'checkbox'
        CheckboxField:
            label.text = label_text
            input.name = '{}.{}'.format(Prefix, Attr)
            config = styles
            value := getattr(model, Attr)
    Conditional:
        condition = styles.get("style", "checkbox") == 'switch'
        SwitchField:
            label.text = label_text
            input.name = '{}.{}'.format(Prefix, Attr)
            config = styles
            value := getattr(model, Attr)
        Div:
            cls = 'row'


template FormControl(Attr, Prefix, Layout, MemberType: Event):
    """ A form control template specialization for Event members.

    This control uses a PushButton to represent the value.

    """
    const button_text = Attr[0].upper() + Attr[1:].lower()
    const styles = Layout.styles.get(Attr, {})
    Div:
        cls = styles.get('cls', 'row')
        Div:
            cls << 'input-field col {}'.format(styles.get('size', 's12'))
            Button:
                text = button_text.replace("_", " ")
                name = '{}.{}'.format(Prefix, Attr)
                cls="waves-effect waves-light btn"
                type='submit'

                # TODO:   clicked :: getattr(model, Attr)()


def enum_labels(model, attr):
    """ Return the list of enum labels for the given model and attr.

    """
    items = getattr(type(model), attr).items
    return sorted(items)


template FormControl(Attr, Prefix, Layout, MemberType: Enum):
    """ A form control template specialization for Enum members.

    Renders either a select or a list of radio inputs based on the `style` metadata tag.

    """
    const label_text = Attr.title().replace("_"," ")
    const styles = Layout.styles.get(Attr, {})
    Conditional:
        condition << styles.get('style', 'select') == 'select'
        Div:
            cls = styles.get('cls', 'row')
            SelectField:
                attr key = Attr
                label.text = label_text
                config = styles
                options = enum_labels(model, Attr)
                value := getattr(model, Attr)
    Conditional: cond:
        condition << styles.get('style','select') == 'radio'
        RadioField:
            label.text = label_text
            config = styles
            options << enum_labels(model, Attr)
            value:= getattr(model, Attr)
        Div:
            cls = 'row'


template FormControl(Attr, Prefix, Layout, MemberType: List):
    """ A form control template specialization for Int members.

    This control uses a spin box to represent the value.

    """
    const label_text = Attr.title().replace("_"," ")
    const styles = Layout.styles.get(Attr, {})
    Div:
        cls = styles.get('cls', 'row')
        Div:
            cls << 'col {}'.format(styles.get('size', 's12'))
            Label:
                text = '{} List'.format(label_text)
                attrs = {'for':Attr}
    Div:
        cls = styles.get('cls', 'row')
        Div:
            cls << 'col {}'.format(styles.get('size', 's12'))
            Ul:
                cls = 'tabs'
                Looper:
                    iterable = getattr(model,Attr)
                    Li:
                        cls = 'tab'
                        A:
                            href = '#{}_{}'.format(Attr, loop_index)
                            text = '{} {}'.format(label_text, loop_index+1)
        Looper:
            iterable = getattr(model,Attr)
            Div:
                id = '{}_{}'.format(Attr,loop_index)
                cls << 'col {}'.format(styles.get('size', 's12'))
                attr obj = loop_item or model.get_member(Attr)
                AutoForm:
                    model = DynamicModel(obj,'{}_{}'.format(Attr,loop_index+1))


template FormControl(Attr, Prefix, Layout, MemberType: Instance):
    """ A form control template specialization for Int members.

    This control uses a spin box to represent the value.

    """
    const label_text = Attr.title().replace("_"," ")
    const styles = Layout.styles.get(Attr, {})
    Conditional: cond:
        condition << isinstance(getattr(model, Attr), Atom)
        AutoForm:
            model := getattr(model, Attr)
    Conditional: 
        condition << not cond.condition
        DynamicTemplate:
            base = FormControl
            args << (Attr, Prefix, Layout, type(getattr(model, Attr)))


template FormControl(Attr, Prefix, Layout, MemberType: datetime.date):
    """ A template which generates a control for an AutoForm.

    This default specialization displays read-only text for the value.

    Parameters
    ----------
    Attr : str
        The name of the attribute on 'model' being accessed.
    Layout: FormLayout
        The layout of the form.
    MemberType : type
        The type of the member being accessed.

    """
    const label_text = Attr.title().replace("_"," ")
    const styles = Layout.styles.get(Attr, {})
    Div:
        cls = styles.get('cls', 'row')
        DatePickerField:
            label.text = label_text
            config = styles
            input.name = '{}.{}'.format(Prefix, Attr)
            value := getattr(model, Attr)


template FormControl(Attr, Prefix, Layout, MemberType: datetime.time):
    """ A template which generates a control for an AutoForm.

    This default specialization displays read-only text for the value.

    Parameters
    ----------
    Attr : str
        The name of the attribute on 'model' being accessed.
    Layout: FormLayout
        The layout of the form.
    MemberType : type
        The type of the member being accessed.

    """
    const label_text = Attr.title().replace("_"," ")
    const styles = Layout.styles.get(Attr, {})
    Div:
        cls = styles.get('cls', 'row')
        TimePickerField:
            label.text = label_text
            config = styles
            input.name = '{}.{}'.format(Prefix, Attr)
            value := getattr(model, Attr)


template FormItem(Attr, Prefix, Layout, MemberType):
    """ A template which generates a pair of items for an AutoForm.

    Parameters
    ----------
    Attr : str
        The name of the attribute on 'model' being accessed.

    MemberType : type
        The type of the member being accessed.

    """
    FormControl(Attr, Prefix, Layout, MemberType):
        pass


def form_sort(member, layout):
    style = layout.styles.get(member[1].name, {})
    if style.get('order') is not None:
        return style['order']
    if member[1].metadata:
        return member[1].metadata.get('order',999)
    return 999


def form_spec(obtype, prefix, layout=None):
    """ Generate a form specification for an atom type.

    Parameters
    ----------
    obtype : type
        The Atom subclass of interest.
    layout: FormLayout
        A form layout

    Returns
    -------
    result : tuple
        A tuple of 2-tuples of (attr, member_type) for all non-private
        members of the class.

    """
    items = []
    fields = layout.fields
    
    
    # Handle common types
    type_map = {
        Atom: Instance,
        str: Str,
        int: Int,
        float: Float,
    }
    
    #fields = fields.split(",") if fields else []
    for name, member in sorted(obtype.members().items(),
                               key=lambda m,l=layout:form_sort(m,layout)):
        if (not name.startswith('_') and (not fields or name in fields)
            and (not member.metadata or not member.metadata.get('private', 
                                                                False))):
            if isinstance(member, Instance):
                member_type = member.validate_mode[-1]
                
                # Do a nested form
                if issubclass(member_type, Atom):
                    member_type = type(member)
                elif member_type in type_map:
                    member_type = type_map[member_type]
            #elif isinstance(member, (Tuple, List)):
                
            else:
                member_type = type(member)
            items.append((name, prefix, layout, member_type))
    #items.sort(key=form_sort)
    return tuple(items)


template ForEach(Spec, Item):
    """ A templated loop which maps a template over a sequence.

    Parameters
    ----------
    Spec : tuple
        A tuple of tuples which are the values to map over the item.

    Item : template
        A template which accepts *values from inner tuples of the spec.

    """
    ForEach(Spec[:-1], Item):
        pass
    Item(*Spec[-1]):
        pass


template ForEach(Spec: (), Item):
    """ The terminating condition for the templated loop.

    """
    pass


template AutoFormBody(ModelType, Prefix, Layout):
    """ A template which builds the body for an AutoForm.

    Parameters
    ----------
    ModelType : type
        The type of the model. This should be an Atom subclass.

    Fields : string
        Comma separated list of fields to create for the model.

    """
    const Spec = form_spec(ModelType, Prefix, Layout)
    ForEach(Spec, FormItem):
        pass


template AutoFormBody(ModelType: type(None), Prefix, Layout):
    """ A template specialization for null models.

    """
    pass


class FormLayout(Atom):
    """ A description of how to layout the form.
    """
    #: Fields
    fields = List()

    #: Style for each field
    styles = Dict()


enamldef AutoForm(Form):
    """ A Form which automatically generates its body from a model.

    Parameters
    ----------
    model : Atom
        Model to generate the form for. This should be an Atom instance.

    fields : List of strings
        List of member fields to include in the form. Shortcut for a layout.

    """
    tag = 'form'
    attr model#: Atom
    attr fields = []
    attr styles = {}
    attr layout: FormLayout
    attr prefix: str = "form"
    #attrs = {'enctype':"multipart/form-data"}
    DynamicTemplate:
        base = AutoFormBody
        args << (type(model), prefix,
                 layout or FormLayout(fields=fields,styles=styles))
